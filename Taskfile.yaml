# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
run: once # by default, each task will only run once. This can be overridden at the task level
output: prefixed

tasks:
  #########################
  ####### MAIN TASKS ######
  #########################
  tf-ready:
    desc: Runs Terraform validations to ensure configuration is healthy
    cmds:
      - task: tf-checks
      - task: tflint

  tf-checks:
    desc: Runs Terraform fmt and validate
    requires:
      vars:
        - TF_CONFIGURATION_DIRECTORY
        - BINARY_NAME
    cmds:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} fmt -recursive"
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} validate"
    deps:
      - tf-init-offline

  tflint:
    desc: Run TFLint
    requires:
      vars:
        - TF_CONFIGURATION_DIRECTORY
        - TFLINT_CONFIG_FILE
    cmds:
      - tflint --recursive --init --config={{.TFLINT_CONFIG_FILE}}
      - tflint --recursive --config={{.TFLINT_CONFIG_FILE}}
    status: ["[ '{{.SKIP_TFLINT}}' == 'true' ]"]
    deps:
      - tf-init-offline

  tf-plan:
    desc: Run Terraform plan
    deps:
      - tf-select-workspace
    requires:
      vars:
        - TF_CONFIGURATION_DIRECTORY
        - TF_INPUTS_FILE
        - BINARY_NAME
    cmds:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} plan -lock=false -var-file={{.TF_INPUTS_FILE}}"

  tf-apply:
    desc: Run Terraform apply
    deps:
      - tf-select-workspace
    requires:
      vars:
        - TF_CONFIGURATION_DIRECTORY
        - TF_INPUTS_FILE
        - BINARY_NAME
    cmds:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} apply -var-file={{.TF_INPUTS_FILE}} -auto-approve"

  tf-clean:
    desc: Cleans the Terraform local environment
    requires:
      vars:
        - TF_CONFIGURATION_DIRECTORY
    cmds:
      - rm -rf {{.TF_CONFIGURATION_DIRECTORY}}/.terraform
      - rm -rf {{.TF_CONFIGURATION_DIRECTORY}}/terraform.tfstate.d

  tf-lock:
    desc: (re)generates the .terraform.lock.hcl file
    requires:
      vars:
        - TF_CONFIGURATION_DIRECTORY
        - BINARY_NAME
    cmds:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} providers lock \
        -platform=windows_amd64 -platform=darwin_amd64 -platform=linux_amd64 -platform=linux_arm64"

  requirements:
    desc: Installs the requirements for the local development environment
    preconditions:
      - sh: tflint --version
        msg: ✗ tflint not installed failed. Run 'brew install tflint' to install tflint
      - sh: checkov --version
        msg: ✗ checkov not installed failed. Run 'brew install checkov' to install checkov
      - sh: aws-vault --version
        msg: ✗ aws-vault not installed failed. Run 'brew install aws-vault' to install aws-vault

  update-submodules:
    desc: Updates Git submodules on the repository
    cmds:
      - git submodule update --init --recursive
      - git submodule update --remote --recursive

  go-build-for-aws-lambda:
    desc: Builds the Go project
    requires:
      vars:
        - GO_PROJECT_DIR
        - GO_OUTPUT_FILE
    env:
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64
      GO111MODULE: on
    cmds:
      - go build -C {{.GO_PROJECT_DIR}} -o {{.GO_OUTPUT_FILE}}
      - rm -rf {{.GO_OUTPUT_FILE}}.zip
      - zip -j {{.GO_OUTPUT_FILE}}.zip {{.GO_OUTPUT_FILE}}

  go-build:
    desc: Builds the Go project
    requires:
      vars:
        - GO_PROJECT_DIR
        - GO_OUTPUT_FILE
    env:
      CGO_ENABLED: 0
      GO111MODULE: on
    cmds:
      - go build -C {{.GO_PROJECT_DIR}} -o {{.GO_OUTPUT_FILE}}
      - rm -rf {{.GO_OUTPUT_FILE}}.zip
      - zip -j {{.GO_OUTPUT_FILE}}.zip {{.GO_OUTPUT_FILE}}

  #########################
  ####### UTIL TASKS ######
  #########################
  tf-init-offline:
    desc: Initializes (offline) the Terraform environment
    requires:
      vars:
        - TF_CONFIGURATION_DIRECTORY
        - BINARY_NAME
    cmds:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} init -input=false -backend=false"
    internal: true

  tf-init:
    desc: Initializes the Terraform environment
    requires:
      vars:
        - TF_CONFIGURATION_DIRECTORY
        - BINARY_NAME
    cmds:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} init -input=false"
    internal: true

  tf-select-workspace:
    desc: Selects the Terraform workspace
    deps:
      - tf-create-workspace
    requires:
      vars:
        - TF_WORKSPACE
        - TF_CONFIGURATION_DIRECTORY
        - BINARY_NAME
    cmds:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} workspace select {{.TF_WORKSPACE}}"
    internal: true

  tf-create-workspace:
    desc: Creates the Terraform workspace
    deps:
      - tf-init
    requires:
      vars:
        - TF_WORKSPACE
        - TF_CONFIGURATION_DIRECTORY
        - BINARY_NAME
    cmds:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} workspace new {{.TF_WORKSPACE}}"
    status:
      - "{{.BINARY_NAME}} -chdir={{.TF_CONFIGURATION_DIRECTORY}} workspace select {{.TF_WORKSPACE}}"
    internal: true
